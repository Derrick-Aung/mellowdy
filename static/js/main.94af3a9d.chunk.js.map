{"version":3,"sources":["config.js","actions/melodyActions.js","actions/types.js","hash.js","components/Header.js","actions/authActions.js","actions/actions.js","components/TagBar/Tag.js","components/TagBar/TagBar.js","components/TagBar/TagConstants.js","components/HomePage/PrimaryContainer.js","components/HomePage/ArtistContainer.js","components/Buttons/BtnAddToLib.js","components/Buttons/BtnAddToPlaylist.js","components/HomePage/SongContainer.js","components/HomePage/AlbumContainer.js","components/Alerts/AlertContainer.js","components/HomePage/Home.js","reducers/melodyReducer.js","reducers/authReducer.js","reducers/actionReducer.js","reducers/rootReducer.js","store.js","App.js","serviceWorker.js","index.js"],"names":["authEndPoint","scopes","baseUri","saveTrackToLibUri","track_id","saveTrackToPlaylistUri","playlist_id","albumUri","album_id","clientID","redirectUri","fetchRecentlyPlayed","token","dispatch","url","Axios","get","headers","then","recentlyPlayedSongs","tracks","data","items","map","song","track","type","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","connect","state","auth","id","general","setToken","getUserProfileId","res","user_id","getUserPlaylists","userPlaylistsUri","user_playlists","props","useState","collapsed","setCollapsed","useEffect","_token","access_token","Navbar","dark","NavbarBrand","href","className","src","process","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","join","Tag","handleClick","setIsFetching","changeTab","name","this","Component","TagBar","PrimaryContainer","dataReady","currentDisplay","isFetching","currentTab","fetchUserTopTracks","fetchCharts","fetchGenre","recentlyPlayed","userTopTracks","charts","genreTracks","prevProps","prevState","setState","filter","preview_url","index","key","handleTrackClick","artists","album","images","mapDispatchToProps","genre","genre_string","escape","genreTracksUri","genre_tracks","melodies","recently_played_songs","user_top_tracks","ArtistContainer","artist_top_tracks","artist_albums","artist","artist_id","artistAblumsUri","artistUri","method","curAlbum","currentArtistId","getArtistDetails","getArtistTopTracks","getArtistAlbums","genres","setGenre","followers","total","album_group","playAlbum","BtnAddToLib","addTrackToLib","trackInLibrary","BtnAddToPlaylist","showMenu","bind","closeMenu","event","preventDefault","document","addEventListener","dropdownMenu","contains","target","removeEventListener","ref","element","playlist","addTrackToPlaylist","SongContainer","trackUri","currentTrackId","getTrack","AlbumContainer","currentAlbumId","release_date","AlertContainer","visible","setVisible","Alert","color","toggle","Home","showOnlyPlayable","songPlaying","audio","currentGenre","checkUserLibUri","result","track_preview_url","Audio","pause","play","checkTrackInLib","tab","boolean","track_uri","console","log","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94af3a9d.chunk.js","sourcesContent":["export const authEndPoint = \"https://accounts.spotify.com/authorize\"\r\nexport const scopes = ['user-read-recently-played', 'user-top-read', 'user-library-modify', 'user-library-read', 'playlist-modify-public']\r\nexport const baseUri = \"https://api.spotify.com/v1/\"\r\n\r\nexport const checkUserLibUri = (track_id) =>  `https://api.spotify.com/v1/me/tracks/contains?ids=${track_id}`\r\nexport const saveTrackToLibUri = (track_id) => `https://api.spotify.com/v1/me/tracks?ids=${track_id}`\r\nexport const saveTrackToPlaylistUri = (playlist_id, track_id) => `https://api.spotify.com/v1/playlists/${playlist_id}/tracks?uris=${track_id}`\r\nexport const userPlaylistsUri = (user_id) => `https://api.spotify.com/v1/users/${user_id}/playlists`\r\nexport const artistTopTracksUri = (id) => {return `https://api.spotify.com/v1/artists/${id}/top-tracks?country=from_token`}\r\nexport const artistAblumsUri = (artist_id) => {return `https://api.spotify.com/v1/artists/${artist_id}/albums?include_groups=album,single&limit=20`}\r\nexport const artistUri = (artist_id) => {return `https://api.spotify.com/v1/artists/${artist_id}`}\r\nexport const albumUri = (album_id) => {return `https://api.spotify.com/v1/albums/${album_id}`}\r\nexport const convertTrackIdToUri = (track_id) => {return `spotify:track:${track_id}`}\r\nexport const genreTracksUri = (genre) => {\r\n    const genre_string = escape(`genre:\"${genre}\"`)\r\n    return `https://api.spotify.com/v1/search?query=${genre_string}&type=track&limit=50`\r\n}\r\nexport const trackUri = (track_id) => {return `https://api.spotify.com/v1/tracks/${track_id}`}\r\n\r\nexport const multiTracksUri = (track_list) => {\r\n    const tracks_string = escape(track_list.map(track => track).join(','))\r\n    return `https://api.spotify.com/v1/tracks/${tracks_string}`\r\n}\r\n\r\n\r\n// dev config\r\n// export const clientID = \"408248c6530e45e7a4975fbfa6ce0948\"\r\n// export const redirectUri = \"http://localhost:3000\"\r\n\r\n// prod config\r\nexport const clientID = \"e4cea7caa08242babef9202eda8e472f\"\r\nexport const redirectUri = \"https://derrick-aung.github.io/mellowdy\"\r\n\r\n// browse by genre\r\n//\"https://api.spotify.com/v1/search?query=genre%3A%22burmese+pop%22&type=track&offset=0&limit=20\"","import {FETCH_RECENTLY_PLAYED,\r\n    FETCH_USER_TOP_TRACKS,\r\n    FETCH_CHARTS,\r\n    FETCH_USER_PLAYLISTS,\r\n    FETCH_GENRE_TRACKS} from './types'\r\nimport Axios from 'axios'\r\nimport {baseUri, userPlaylistsUri, genreTracksUri} from '../config'\r\n\r\nexport function fetchRecentlyPlayed(token){\r\n    return function(dispatch){\r\n        const url = `${baseUri}me/player/recently-played?limit=50`\r\n        Axios.get(url, {\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        }).then( recentlyPlayedSongs => {\r\n                // The data we want are in the 'track' value\r\n                let tracks = recentlyPlayedSongs.data.items.map(\r\n                    (song) => {return song.track}\r\n                )\r\n                dispatch({\r\n                    type: FETCH_RECENTLY_PLAYED,\r\n                    recentlyPlayedSongs: tracks\r\n                })\r\n            }\r\n        )\r\n    }\r\n} \r\n\r\nexport function fetchUserTopTracks(token){\r\n    return function(dispatch){\r\n        const url = `${baseUri}me/top/tracks?limit=50`\r\n        Axios.get(url, {\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        }).then( userTopTracks => {\r\n                dispatch({\r\n                    type: FETCH_USER_TOP_TRACKS,\r\n                    userTopTracks: userTopTracks.data.items\r\n                })\r\n            }\r\n        )\r\n    }\r\n} \r\n\r\n//https://api.spotify.com/v1/me??&offset=0&market=AU\r\n//\"https://api.spotify.com/v1/playlists/37i9dQZEVXbLiRSasKsNU9\"\r\n//api.spotify.com/v1/playlists/37i9dQZEVXbMDoHDwVN2tF?type=track%2Cepisode&market=from_token\r\nexport function fetchCharts(token){\r\n    return function(dispatch){\r\n        const url = `${baseUri}playlists/37i9dQZEVXbMDoHDwVN2tF`\r\n        Axios.get(url, {\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        }).then( charts => {\r\n                let tracks = charts.data.tracks.items.map(\r\n                    (song) => {return song.track}\r\n                )\r\n                dispatch({\r\n                    type: FETCH_CHARTS,\r\n                    charts: tracks\r\n                })\r\n            }\r\n        )\r\n    }\r\n} \r\n\r\nexport function fetchPlaylists(token){\r\n    return function(dispatch){\r\n        const url = `${baseUri}browse/categories/toplists/playlists?limit=50&country=AU&offset=0`\r\n        Axios.get(url, {\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        }).then( charts => {\r\n                dispatch({\r\n                    type: FETCH_CHARTS,\r\n                    charts: charts.data.playlists.items\r\n                })\r\n            }\r\n        )\r\n    }\r\n} \r\n\r\nexport function getUserPlaylists(user_id, token){\r\n    return function(dispatch){\r\n        const url = userPlaylistsUri(user_id)\r\n        Axios.get(url, {\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        }).then( res => {\r\n                let user_playlists = res.data.items\r\n                dispatch({\r\n                    type: FETCH_USER_PLAYLISTS,\r\n                    user_playlists: user_playlists\r\n                })\r\n            }\r\n        )\r\n    }\r\n} \r\n\r\nexport function fetchGenre(token, genre){\r\n    return function(dispatch){\r\n        const url = genreTracksUri(genre)\r\n        Axios.get(url, {\r\n            headers: {'Authorization': `Bearer ${token}`}\r\n        }).then( res => {\r\n                let genre_tracks = res.data.tracks.items\r\n                dispatch({\r\n                    type: FETCH_GENRE_TRACKS,\r\n                    genre_tracks: genre_tracks\r\n                })\r\n            }\r\n        )\r\n    }\r\n} ","export const GET_TOKEN = \"GET_TOKEN\"\r\nexport const SET_TOKEN = \"SET_TOKEN\"\r\nexport const FETCH_RECENTLY_PLAYED = \"FETCH_RECENTLY_PLAYED\"\r\nexport const FETCH_USER_TOP_TRACKS = \"FETCH_USER_TOP_TRACKS\"\r\nexport const FETCH_CHARTS = \"FETCH_CHARTS\"\r\nexport const SET_USER_ID = \"SET_USER_ID\"\r\nexport const FETCH_USER_PLAYLISTS = \"FETCH_USER_PLAYLISTS\"\r\nexport const FETCH_GENRE_TRACKS = \"FETCH_GENRE_TRACKS\"","// Get the hash of the url\r\nconst hash = window.location.hash\r\n  .substring(1)\r\n  .split(\"&\")\r\n  .reduce(function(initial, item) {\r\n    if (item) {\r\n      var parts = item.split(\"=\");\r\n      initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    }\r\n    return initial;\r\n  }, {});\r\n// window.location.hash=\"\"\r\n\r\nexport default hash;\r\n\r\n// http://localhost:3000/#access_token=BQAL2XHD3sdmogp-AsCO4y_vUxO5o6Cbo\r\n// &token_type=Bearer\r\n//  &expires_in=3600","import React, { useState, useEffect } from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\r\nimport {connect} from 'react-redux'\r\nimport {setToken} from '../actions/authActions'\r\nimport {getUserProfileId} from '../actions/actions'\r\nimport {getUserPlaylists} from '../actions/melodyActions'\r\nimport {authEndPoint,clientID,redirectUri,scopes} from '../config'\r\nimport hash from '../hash'\r\n\r\nconst Header = (props) => {\r\n  const [collapsed, setCollapsed] = useState(true);\r\n\r\n  const toggleNavbar = () => setCollapsed(!collapsed);\r\n\r\n  useEffect(() => {\r\n    let _token = hash.access_token\r\n    props.setToken(_token)\r\n    window.location.hash=\"\"\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    props.getUserProfileId(props.token)\r\n  }, [props.token])\r\n\r\n  useEffect(() => {\r\n    props.getUserPlaylists(props.id, props.token)\r\n  }, [props.token ,props.id])\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <Navbar dark>\r\n        <NavbarBrand href=\"#\" className=\"mr-auto\">\r\n        <img className=\"mellowdy-logo\" src={process.env.PUBLIC_URL +'/redfox.png'} alt=\"\"/>\r\n        Mellowdy | Discover yourself</NavbarBrand>\r\n        <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\r\n        <Collapse isOpen={!collapsed} navbar>\r\n          <Nav navbar>\r\n            <NavItem>\r\n                {!props.token ?  \r\n                (<NavLink href={`${authEndPoint}?client_id=${clientID}&redirect_uri=${redirectUri}&response_type=token&show_dialog=true&scope=${scopes.join(\"%20\")}`}>\r\n                  Login With Spotify\r\n                </NavLink>):(\r\n                  <NavLink href={redirectUri}>\r\n                  Logout\r\n                  </NavLink>\r\n                )}\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"https://github.com/Derrick-Aung/mellowdy\">GitHub</NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      token: state.auth.token,\r\n      id: state.general.id\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {setToken,getUserProfileId,getUserPlaylists})(Header);","import {SET_TOKEN} from './types'\r\n\r\nexport function setToken(token){\r\n    return ({\r\n        type: SET_TOKEN,\r\n        token\r\n    })\r\n}","import Axios from 'axios'\r\nimport {baseUri} from '../config'\r\nimport {SET_USER_ID} from './types'\r\n\r\nexport function getUserProfileId(token){\r\n    return function(dispatch){\r\n        const url = `${baseUri}me`\r\n        Axios.get(url, {\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        }).then( res => {\r\n                let id = res.data.id\r\n                dispatch({\r\n                    type: SET_USER_ID,\r\n                    user_id: id\r\n                })\r\n            }\r\n        )\r\n    }\r\n} ","import React, { Component } from 'react'\r\n\r\nexport class Tag extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.props.setIsFetching(true)\r\n        this.props.changeTab(this.props.name)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <span className=\"tag\" onClick={this.handleClick}>{this.props.name ? (this.props.name):(\"Default\")}</span>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Tag\r\n","import React from 'react'\r\nimport Tag  from './Tag'\r\nimport {RECENTLY_PLAYED, YOUR_TOP_TRACKS, CHARTS} from '../TagBar/TagConstants'\r\n\r\nexport default function TagBar(props) {\r\n    return (\r\n        <div className=\"tag-container\">\r\n        <Tag \r\n            name={CHARTS}\r\n            changeTab={props.changeTab}\r\n            setIsFetching={props.setIsFetching}/>\r\n            <Tag \r\n            name={RECENTLY_PLAYED} \r\n            changeTab={props.changeTab}\r\n            setIsFetching={props.setIsFetching}/>\r\n            <Tag \r\n            name={YOUR_TOP_TRACKS} \r\n            changeTab={props.changeTab}\r\n            setIsFetching={props.setIsFetching}/>\r\n        </div>\r\n    )\r\n}\r\n","export const RECENTLY_PLAYED = \"Recently Played\"\r\nexport const YOUR_TOP_TRACKS = \"Your Top Tracks\"\r\nexport const CHARTS = \"Charts\"\r\nexport const ALBUM_VIEW = \"\"\r\nexport const ARTIST_VIEW = \"\"\r\n","import React, { Component } from 'react'\r\nimport {fetchRecentlyPlayed, fetchUserTopTracks, fetchCharts, fetchGenre} from '../../actions/melodyActions'\r\nimport {connect} from 'react-redux'\r\nimport { RECENTLY_PLAYED,YOUR_TOP_TRACKS, CHARTS } from '../TagBar/TagConstants'\r\n\r\nexport class PrimaryContainer extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            dataReady: false,\r\n            currentDisplay:null\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        let currentDisplay = null\r\n        if(this.props.isFetching){\r\n            switch(this.props.currentTab){\r\n                case RECENTLY_PLAYED:\r\n                    this.props.fetchRecentlyPlayed(this.props.token)\r\n                    break\r\n                case YOUR_TOP_TRACKS:\r\n                    this.props.fetchUserTopTracks(this.props.token)\r\n                    break\r\n                case CHARTS:\r\n                    this.props.fetchCharts(this.props.token)\r\n                    break\r\n                default:\r\n                    this.props.fetchGenre(this.props.token, this.props.currentTab)\r\n                    break\r\n            }\r\n            this.props.setIsFetching(false)\r\n        }else{\r\n            switch(this.props.currentTab){\r\n                case RECENTLY_PLAYED:\r\n                    currentDisplay = this.props.recentlyPlayed\r\n                    break\r\n                case YOUR_TOP_TRACKS:\r\n                    currentDisplay = this.props.userTopTracks\r\n                    break\r\n                case CHARTS:\r\n                    currentDisplay = this.props.charts\r\n                    break\r\n                default:\r\n                    currentDisplay = this.props.genreTracks\r\n                    break\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        let currentDisplay = null\r\n        if(this.props.isFetching){\r\n            switch(this.props.currentTab){\r\n                case RECENTLY_PLAYED:\r\n                    this.props.fetchRecentlyPlayed(this.props.token)\r\n                    break\r\n                case YOUR_TOP_TRACKS:\r\n                    this.props.fetchUserTopTracks(this.props.token)\r\n                    break\r\n                case CHARTS:\r\n                    this.props.fetchCharts(this.props.token)\r\n                    break\r\n                default:\r\n                    this.props.fetchGenre(this.props.token, this.props.currentTab)\r\n                    break\r\n            }\r\n            this.props.setIsFetching(false)\r\n        }else{\r\n            switch(this.props.currentTab){\r\n                case RECENTLY_PLAYED:\r\n                    currentDisplay = this.props.recentlyPlayed\r\n                    break\r\n                case YOUR_TOP_TRACKS:\r\n                    currentDisplay = this.props.userTopTracks\r\n                    break\r\n                case CHARTS:\r\n                    currentDisplay = this.props.charts\r\n                    break\r\n                default:\r\n                    currentDisplay = this.props.genreTracks\r\n                    break\r\n            }\r\n            if(prevState.currentDisplay !== currentDisplay){\r\n                this.setState({\r\n                    currentDisplay: currentDisplay\r\n                })\r\n            }\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"primary-container mb-4\">\r\n                \r\n                <div >\r\n                    <h2>{this.props.currentTab}</h2>\r\n                    {!this.props.isFetching && this.state.currentDisplay &&\r\n                    <div className=\"grid-container my-4\">\r\n                        {this.state.currentDisplay.filter(song => (song.preview_url))\r\n                        .map((song, index) => (\r\n                            <div className=\"song-container\" key={index}>\r\n                                <img onClick={() => this.props.handleTrackClick(song.id,song.preview_url, song.artists[0].id, song.album.id)} src={song.album.images[0].url} alt=\"\"/>\r\n                            </div>\r\n                        ))}\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token,\r\n        recentlyPlayed: state.melodies.recently_played_songs,\r\n        userTopTracks: state.melodies.user_top_tracks,\r\n        charts: state.melodies.charts,\r\n        genreTracks: state.melodies.genre_tracks\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {fetchRecentlyPlayed, fetchUserTopTracks, fetchCharts, fetchGenre}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(PrimaryContainer)\r\n\r\n// dataready should be set to false when clicked on tag(Props??)","import React, { Component } from 'react'\r\nimport Axios from 'axios'\r\nimport {artistUri, artistAblumsUri, artistTopTracksUri,albumUri} from '../../config'\r\nimport {connect} from 'react-redux'\r\n\r\nexport class ArtistContainer extends Component {\r\n    \r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            artist_top_tracks: null,\r\n            artist_albums: null,\r\n            artist: null\r\n        }\r\n    }\r\n\r\n    getArtistTopTracks(artist_id){\r\n        Axios.get(artistTopTracksUri(artist_id), {\r\n            headers: {'Authorization': `Bearer ${this.props.token}`}\r\n        }).then(\r\n            res => {\r\n                this.setState({artist_top_tracks: res.data})}\r\n        )\r\n    }\r\n\r\n    getArtistAlbums(artist_id){\r\n        Axios.get(artistAblumsUri(artist_id), {\r\n            headers: {'Authorization': `Bearer ${this.props.token}`}\r\n        }).then(\r\n            res => {this.setState({artist_albums:res.data.items})}\r\n        )\r\n    }\r\n\r\n    getArtistDetails(artist_id){\r\n        Axios.get(artistUri(artist_id), {\r\n            headers: {'Authorization': `Bearer ${this.props.token}`}\r\n        }).then(\r\n            res => {this.setState({artist: res.data})}\r\n        )\r\n    }\r\n\r\n    playAlbum(album_id){\r\n        Axios({\r\n            method: 'get',\r\n            url: albumUri(album_id),\r\n            headers: {\r\n                'Authorization': `Bearer ${this.props.token}`,\r\n            }\r\n        }).then(\r\n            res=>{\r\n            let curAlbum = res.data\r\n            this.props.handleTrackClick(curAlbum.tracks.items[0].id , curAlbum.tracks.items[0].preview_url, curAlbum.artists[0].id, curAlbum.id)\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.currentArtistId !== this.props.currentArtistId){\r\n            let artist_id = this.props.currentArtistId\r\n            this.getArtistDetails(artist_id)\r\n            this.getArtistTopTracks(artist_id)\r\n            this.getArtistAlbums(artist_id)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(this.state.artist && this.state.artist_albums && this.state.artist_top_tracks)\r\n        {\r\n            return (\r\n                <div className=\"artist-container\">\r\n                    <div>\r\n                        <div className=\"artist-details\">\r\n                            <div className=\"artist-img\">\r\n                                <img src={this.state.artist.images[0] ? (this.state.artist.images[0].url):(\"\")} alt=\"\"/>\r\n                            </div>\r\n                            <div className=\"artist-info\">\r\n                                <span>{this.state.artist.name}</span>\r\n                                <div className=\"my-2\">\r\n                                    <span>{this.state.artist.genres.map((genre,index)=>(<span className=\"clickable genre\" key={`genre-${index}`} onClick={() => this.props.setGenre(genre)}>{genre}</span>))}</span>\r\n                                </div>\r\n                                <span className=\"muted-text-light\">{this.state.artist.followers.total} followers</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"top-tracks\">\r\n                            <span>Top Tracks</span>\r\n                            <div className=\"song-container\">\r\n                                {this.state.artist_top_tracks.tracks.filter(track => (track.preview_url))\r\n                                .map((track, index) => (\r\n                                <img key={`track-${index}`} onClick={() => this.props.handleTrackClick(track.id, track.preview_url, track.artists[0].id, track.album.id)} src={track.album.images[0].url} alt=\"\"/>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"top-tracks\">\r\n                            <span>Albums</span>\r\n                            <div className=\"song-container\">\r\n                                {this.state.artist_albums\r\n                                .filter(album => album.album_group === \"album\")\r\n                                .map((album, index) => (\r\n                                <img key={`album-${index}`}  onClick={() => this.playAlbum(album.id)} src={album.images[0].url} alt=\"\"/>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"top-tracks\">\r\n                            <span>Single</span>\r\n                            <div className=\"song-container\">\r\n                                {this.state.artist_albums\r\n                                .filter(album => album.album_group === \"single\")\r\n                                .map((album, index) => (\r\n                                <img key={`single-${index}`} onClick={() => this.playAlbum(album.id)} src={album.images[0].url} alt=\"\"/>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }else{\r\n            return null\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        token: state.auth.token\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ArtistContainer)\r\n","import React from 'react'\r\n\r\nexport default function BtnAddToLib(props) {\r\n\r\n\r\n    return (\r\n        <span className=\"add-button mx-2\" onClick={()=> props.addTrackToLib()}>\r\n            {props.trackInLibrary ? (<i className=\"fas fa-check\"></i>)\r\n                : (<i className=\"fas fa-plus\"></i>)}\r\n        </span>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nexport class BtnAddToPlaylist extends Component {\r\n    \r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            showMenu: false,\r\n        }\r\n        this.showMenu = this.showMenu.bind(this)\r\n        this.closeMenu = this.closeMenu.bind(this)\r\n    }\r\n\r\n    showMenu(event) {\r\n        event.preventDefault();\r\n        this.setState({\r\n            showMenu:true\r\n        }, () => {\r\n            document.addEventListener('click', this.closeMenu)\r\n        })\r\n    }\r\n\r\n    closeMenu(event) {\r\n        if(!this.dropdownMenu.contains(event.target)){\r\n            this.setState({\r\n                showMenu:false\r\n            }, () => {\r\n                document.removeEventListener('click', this.closeMenu)\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n           <span className=\"add-button mx-2\" onClick={this.showMenu} >\r\n                <i className=\"fas fa-list\"></i>\r\n                {\r\n                this.state.showMenu ? (\r\n                     <div className=\"playlist-menu\" ref={(element) => {\r\n                        this.dropdownMenu = element;\r\n                    }}>\r\n                        {\r\n                        this.props.user_playlists.map(\r\n                            playlist => (\r\n                                <button key={playlist.id} onClick={() => this.props.addTrackToPlaylist(playlist.id)}>{`+ ${playlist.name}`}</button>\r\n                            )\r\n                        )\r\n                        }\r\n                    </div>\r\n                ):(\r\n                    null\r\n                )\r\n                }\r\n            </span>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps=(state) => {\r\n    return{\r\n        user_playlists: state.melodies.user_playlists\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(BtnAddToPlaylist)\r\n","import BtnAddToLib from '../Buttons/BtnAddToLib'\r\nimport BtnAddToPlaylist from '../Buttons/BtnAddToPlaylist'\r\nimport React, { Component } from 'react'\r\nimport {trackUri} from '../../config'\r\nimport Axios from 'axios'\r\nimport {connect} from 'react-redux'\r\n\r\nexport class SongContainer extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            track_id: null,\r\n            track: null\r\n        }\r\n    }\r\n\r\n    getTrack(track_id){\r\n        Axios.get(trackUri(track_id), {\r\n            headers: {'Authorization': `Bearer ${this.props.token}`}\r\n        }).then(\r\n            res => {\r\n                this.setState({track: res.data})}\r\n        )\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.currentTrackId !== this.props.currentTrackId){\r\n            this.getTrack(this.props.currentTrackId)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n            {this.state.track && \r\n                <div className=\"details-container\">\r\n                    <div>\r\n                        <div className=\"details-main-img\">\r\n                            <img src={this.state.track.album.images[0].url} alt=\"\"/>\r\n                            <div className=\"add-buttons\">\r\n                                <BtnAddToLib addTrackToLib={this.props.addTrackToLib} trackInLibrary= {this.props.trackInLibrary}/>\r\n                                <BtnAddToPlaylist addTrackToPlaylist={this.props.addTrackToPlaylist}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"details-info\">\r\n                            <div>\r\n                                <span className=\"song-title-text\">{this.state.track.name}</span>\r\n                                <span className=\"muted-text\">{this.state.track.artists.map((artist) => (artist.name)).join(' & ')}</span>\r\n                                <span className=\"muted-text\">{`From the album ${this.state.track.album.name}`}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        token: state.auth.token\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(SongContainer)\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios'\r\nimport {albumUri} from '../../config'\r\nimport {connect} from 'react-redux'\r\n\r\nexport class AlbumContainer extends Component {\r\n    \r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            album: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n    \r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.currentAlbumId !== this.props.currentAlbumId){\r\n            let album_id = this.props.currentAlbumId\r\n            Axios({\r\n                method: 'get',\r\n                url: albumUri(album_id),\r\n                headers: {\r\n                    'Authorization': `Bearer ${this.props.token}`,\r\n                }\r\n            }).then(\r\n                res=>{\r\n                    this.setState({\r\n                    album: res.data\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(this.state.album)\r\n        {\r\n            return (\r\n                <div className=\"album-container\">\r\n                    <div>\r\n                        <div className=\"album-details\">\r\n                            <div className=\"album-img\">\r\n                                <img src={this.state.album.images[1].url} alt=\"\"/>\r\n                            </div>\r\n                            <div className=\"album-info\">\r\n                                <span>{this.state.album.name}</span>\r\n                                <span className=\"muted-text-light\">By {this.state.album.artists[0].name}</span>\r\n                                <span className=\"muted-text-light\">Released {this.state.album.release_date}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"album-tracks\">\r\n                            <span>Tracks</span>\r\n                            <div className=\"track-list-container\">\r\n                                {this.state.album.tracks.items.filter(track => (track.preview_url))\r\n                                .map((track, index) => (\r\n                                <div className=\"album-track mt-1\" key={index}>\r\n                                    <img onClick={() => this.props.handleTrackClick(track.id,track.preview_url, \r\n                                    this.state.album.artists[0].id,\r\n                                    this.state.album.id)} src={this.state.album.images[1].url} alt=\"\"/>\r\n                                    <span className=\"ml-3\">{track.name}</span>\r\n                                </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }else{\r\n            return null\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        token: state.auth.token\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AlbumContainer)\r\n","import React, { useState } from 'react';\r\nimport { Alert } from 'reactstrap';\r\n\r\nconst AlertContainer = (props) => {\r\n  const [visible, setVisible] = useState(true);\r\n\r\n  const onDismiss = () => setVisible(false);\r\n\r\n  return (\r\n    <Alert className=\"mt-3\" color=\"success\" isOpen={visible} toggle={onDismiss}>\r\n      Sound warning! Dive in and start listening by clicking on the boxes below.\r\n    </Alert>\r\n  );\r\n}\r\n\r\nexport default AlertContainer;\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {fetchRecentlyPlayed} from '../../actions/melodyActions'\r\nimport Axios from 'axios'\r\nimport {convertTrackIdToUri,\r\n    saveTrackToLibUri,\r\n    saveTrackToPlaylistUri,\r\n    checkUserLibUri,\r\n    albumUri,\r\n    trackUri} from '../../config'\r\nimport TagBar from '../TagBar/TagBar'\r\nimport PrimaryContainer from './PrimaryContainer'\r\nimport {RECENTLY_PLAYED, YOUR_TOP_TRACKS, CHARTS} from '../TagBar/TagConstants'\r\nimport ArtistContainer from './ArtistContainer'\r\nimport SongContainer from './SongContainer'\r\nimport {authEndPoint,clientID,redirectUri,scopes} from '../../config'\r\nimport AlbumContainer from './AlbumContainer'\r\nimport AlertContainer from '../Alerts/AlertContainer'\r\n\r\nexport class Home extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            showOnlyPlayable: true,\r\n            dataReady: true,\r\n            isFetching: true,\r\n            songPlaying: false,\r\n            audio: null,\r\n            currentTab: CHARTS,\r\n            trackInLibrary: false,\r\n            currentArtistId: null,\r\n            currentAlbumId: null,\r\n            currentTrackId: null,\r\n            currentGenre: null,\r\n        }\r\n        this.handleTrackClick = this.handleTrackClick.bind(this);\r\n        this.changeTab = this.changeTab.bind(this)\r\n        this.setIsFetching = this.setIsFetching.bind(this)\r\n        this.addTrackToLib = this.addTrackToLib.bind(this)\r\n        this.addTrackToPlaylist = this.addTrackToPlaylist.bind(this)\r\n        this.setGenre = this.setGenre.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n    }\r\n\r\n    // this should be name handleTrackClick or smth\r\n    // handleTrackClick(track_id, track_preview_url, artist_id, album_id){\r\n    //     this.playAudio(track_id, track_preview_url, artist_id, album_id)\r\n    // }\r\n\r\n    fetchAudioAndDetails(){}\r\n\r\n    checkTrackInLib(track_id){\r\n        Axios.get(checkUserLibUri(track_id), {\r\n            headers: {\r\n                'Authorization': `Bearer ${this.props.token}`\r\n            }\r\n        }).then(\r\n            data => {\r\n                let result = data.data[0]\r\n                this.setState({\r\n                    trackInLibrary: result\r\n                })\r\n                \r\n            }    \r\n        )\r\n    }\r\n\r\n    handleTrackClick(track_id, track_preview_url, artist_id, album_id){\r\n\r\n        let audio = new Audio(track_preview_url)\r\n        if (!this.state.songPlaying){\r\n        audio.play();\r\n        this.setState({\r\n                songPlaying: true,\r\n                currentAlbumId: album_id,\r\n                currentArtistId: artist_id,\r\n                currentTrackId: track_id,\r\n                audio,\r\n            })\r\n        }else{\r\n            if(this.state.currentTrackId == track_id){\r\n                this.state.audio.pause();\r\n                this.setState(\r\n                    {\r\n                        songPlaying: false,\r\n                    }\r\n                )\r\n            }else{\r\n                this.state.audio.pause()\r\n                audio.play()\r\n                this.setState({\r\n                    songPlaying:true,\r\n                    currentAlbumId: album_id,\r\n                    currentArtistId: artist_id,\r\n                    currentTrackId: track_id,\r\n                    audio,})\r\n            }\r\n        }\r\n        \r\n\r\n        \r\n        this.checkTrackInLib(track_id)\r\n    }\r\n\r\n    changeTab(tab){\r\n        this.setState({\r\n            currentTab: tab\r\n        })\r\n    }\r\n\r\n    setGenre(genre){\r\n        this.setState({\r\n            currentGenre: genre,\r\n            currentTab: genre,\r\n            isFetching: true\r\n        })\r\n    }\r\n\r\n    setIsFetching(boolean){\r\n        this.setState({\r\n            isFetching:boolean\r\n        })\r\n    }\r\n\r\n    addTrackToLib(){\r\n        let track_id = this.state.currentTrackId\r\n        Axios({\r\n            method: 'put',\r\n            url: saveTrackToLibUri(track_id),\r\n            headers: {\r\n                'Authorization': `Bearer ${this.props.token}`\r\n            }\r\n        }).then(\r\n            this.setState(\r\n                {\r\n                    trackInLibrary: true\r\n                }\r\n            )\r\n        )\r\n    }\r\n\r\n\r\n    addTrackToPlaylist(playlist_id){\r\n        let track_uri = convertTrackIdToUri(this.state.currentTrackId)\r\n        Axios({\r\n            method: 'post',\r\n            url: saveTrackToPlaylistUri(playlist_id, track_uri),\r\n            headers: {\r\n                'Authorization': `Bearer ${this.props.token}`,\r\n                'Content-Type': 'application/json',\r\n            }\r\n        }).then(\r\n            console.log(\"Added track to playlist\")\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if(!this.props || !this.props.token){\r\n            return (\r\n                <div className=\"login-container\">\r\n                    <span>The new way to discover music feat. The Spotify API</span>\r\n                    <br/>\r\n                    <span className=\"muted-text\">A web project by Aung Phone Khant (Derrick)</span>\r\n                    <br/>\r\n                    <br/>\r\n                    <span className=\"muted-text\">Note: This is for only for big screens as it is an ongoing project</span>\r\n                    <div><span className=\"tag mt-3\">\r\n                        <a href={`${authEndPoint}?client_id=${clientID}&redirect_uri=${redirectUri}&response_type=token&show_dialog=true&scope=${scopes.join(\"%20\")}`}>\r\n                            Login To Spotify First\r\n                        </a></span></div>\r\n                    \r\n                </div>\r\n            )\r\n        }else{\r\n            return (\r\n                <div>\r\n                    <TagBar changeTab={this.changeTab} setIsFetching={this.setIsFetching}/>\r\n                    <AlertContainer />\r\n                    <div className=\"main-container\">\r\n                        <PrimaryContainer \r\n                        isFetching={this.state.isFetching} \r\n                        setIsFetching={this.setIsFetching}\r\n                        currentTab={this.state.currentTab} \r\n                        handleTrackClick={this.handleTrackClick}/>\r\n                        <SongContainer \r\n                        currentTrackId={this.state.currentTrackId} \r\n                        addTrackToLib={this.addTrackToLib} \r\n                        addTrackToPlaylist={this.addTrackToPlaylist}\r\n                        trackInLibrary={this.state.trackInLibrary}\r\n                        />\r\n                    </div>\r\n                    <ArtistContainer \r\n                    currentArtistId={this.state.currentArtistId}\r\n                    handleTrackClick={this.handleTrackClick}\r\n                    playAlbum={this.playAlbum}\r\n                    setGenre={this.setGenre}\r\n                    />\r\n                    <AlbumContainer \r\n                    currentAlbumId={this.state.currentAlbumId}\r\n                    handleTrackClick={this.handleTrackClick}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token,\r\n        recentlyPlayed: state.melodies.recently_played_songs\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {fetchRecentlyPlayed}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home)\r\n","import {FETCH_RECENTLY_PLAYED,\r\n    FETCH_USER_TOP_TRACKS,\r\n    FETCH_CHARTS,\r\n    FETCH_USER_PLAYLISTS,\r\n    FETCH_GENRE_TRACKS} from '../actions/types'\r\n\r\nconst initialState = {\r\n    recently_played_songs : [],\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case FETCH_RECENTLY_PLAYED:\r\n            return {\r\n                ...state,\r\n                recently_played_songs: action.recentlyPlayedSongs\r\n            }\r\n        case FETCH_USER_TOP_TRACKS:\r\n            return {\r\n                ...state,\r\n                user_top_tracks: action.userTopTracks\r\n            }\r\n        case FETCH_CHARTS:\r\n            return {\r\n                ...state,\r\n                charts: action.charts\r\n            }\r\n        case FETCH_CHARTS:\r\n            return {\r\n                ...state,\r\n                charts: action.charts\r\n            }\r\n        case FETCH_USER_PLAYLISTS:\r\n            return {\r\n                ...state,\r\n                user_playlists: action.user_playlists\r\n            }\r\n        case FETCH_GENRE_TRACKS:\r\n            return {\r\n                ...state,\r\n                genre_tracks: action.genre_tracks\r\n            }\r\n        default:\r\n            return state;    \r\n    }\r\n}","import {SET_TOKEN} from '../actions/types'\r\n\r\nconst initialState = {\r\n    token : null,\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case SET_TOKEN:\r\n            return{\r\n                ...state,\r\n                token: action.token                \r\n            }\r\n        default:\r\n            return state;    \r\n    }\r\n}","import {SET_USER_ID} from '../actions/types'\r\n\r\nconst initialState = {\r\n    id : null,\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case SET_USER_ID:\r\n            return{\r\n                ...state,\r\n                id: action.user_id                \r\n            }\r\n        default:\r\n            return state;    \r\n    }\r\n}","import {combineReducers} from 'redux'\r\nimport melodyReducer from './melodyReducer'\r\nimport authReducer from './authReducer'\r\nimport actionReducer from './actionReducer'\r\n\r\nexport default combineReducers({\r\n    auth: authReducer,\r\n    melodies: melodyReducer,\r\n    general: actionReducer,\r\n})\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers/rootReducer'\r\n\r\nconst initialState = {}\r\nconst middleware = [thunk, ]\r\n\r\n// dev config\r\n// const store = createStore(rootReducer, initialState, compose(applyMiddleware(...middleware), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()))\r\n\r\n// prod config\r\nconst store = createStore(rootReducer, initialState, compose(applyMiddleware(...middleware)))\r\n\r\nexport default store","import './App.css';\nimport React, { Component } from 'react'\nimport Header from './components/Header'\nimport Home from './components/HomePage/Home'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nexport class App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Header/>\n          <Home/>\n        </div>\n      </Provider>\n      \n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}